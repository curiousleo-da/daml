# Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("@os_info//:os_info.bzl", "is_windows")

genrule(
    name = "test-certificates",
    srcs = [
        ":root-ca.cnf.sample"
    ],
    outs = [
        "openssl.cnf",
        "newcerts",
        "index.txt",
        "serial",
        "ca.key.pem",
        "ca.cert.pem",
        "server.key.pem",
        "server.pem",
        "server.csr.pem",
        "server.cert.pem",
        "client.key.pem",
        "client.pem",
        "client.csr.pem",
        "client.cert.pem",
        "ocsp.key.pem",
        "ocsp.csr.pem",
        "ocsp.cert.pem",
        "client-revoked.key.pem",
        "client-revoked.csr.pem",
        "client-revoked.cert.pem",
    ],
    cmd = """
set -eou pipefail

ABSOLUTE_OUT=$$( cd "$$(dirname $(location openssl.cnf))" >/dev/null 2>&1 && pwd )

# Generate SSL config from the template
cat $(location root-ca.cnf.sample) | sed -e "s;<ROOTDIR>;$$ABSOLUTE_OUT;g" > $(location openssl.cnf)

# Setup directories
mkdir $(location newcerts)
touch $(location index.txt)
echo 1000 > $(location serial)

# Generate Root CA private key
$(location @openssl_dev_env//:openssl) genrsa -out $(location ca.key.pem) 4096
chmod 400 $(location ca.key.pem)
# Create Root Certificate (self-signed)
$(location @openssl_dev_env//:openssl) req -config $(location openssl.cnf) \
    -key $(location ca.key.pem) \
    -new -x509 -days 7300 -sha256 -extensions v3_ca \
    -subj '/CN=0.0.0.0.ca' \
    -out $(location ca.cert.pem)
# Dump out cert details
$(location @openssl_dev_env//:openssl) x509 -noout -text -in $(location ca.cert.pem)


# Generate Server private key
$(location @openssl_dev_env//:openssl) genrsa -out $(location server.key.pem) 4096
$(location @openssl_dev_env//:openssl) pkey -in $(location server.key.pem) -out $(location server.pem)
chmod 400 $(location server.key.pem)
# Create Server certificate
$(location @openssl_dev_env//:openssl) req -config $(location openssl.cnf) \
    -subj '/CN=0.0.0.0.server' \
    -addext "subjectAltName = DNS:localhost, IP:127.0.0.1" \
    -key $(location server.key.pem) \
    -new -sha256 -out $(location server.csr.pem)
# Sign Certificate
$(location @openssl_dev_env//:openssl) ca -batch -config $(location openssl.cnf) \
    -extensions server_cert -days 365 -notext -md sha256 \
    -in $(location server.csr.pem) \
    -out $(location server.cert.pem)
chmod 444 $(location server.cert.pem)

$(location @openssl_dev_env//:openssl) x509 -noout -text \
    -in $(location server.cert.pem)

# Generate Client CA private key
$(location @openssl_dev_env//:openssl) genpkey -out $(location client.key.pem) -algorithm RSA -pkeyopt rsa_keygen_bits:2048
$(location @openssl_dev_env//:openssl) pkey -in $(location client.key.pem) -out $(location client.pem)
$(location @openssl_dev_env//:openssl) req -new -key $(location client.key.pem) \
    -subj '/CN=0.0.0.0.client' \
    -addext "subjectAltName = DNS:localhost, IP:127.0.0.1" \
    -out $(location client.csr.pem)
# Sign Client Cert
$(location @openssl_dev_env//:openssl) ca -batch -config $(location openssl.cnf) \
    -extensions usr_cert -notext -md sha256 \
    -in $(location client.csr.pem) \
    -out $(location client.cert.pem)
# Validate cert is correct
$(location @openssl_dev_env//:openssl) verify -CAfile $(location ca.cert.pem) \
    $(location client.cert.pem)


# Generate OCSP Server private key
$(location @openssl_dev_env//:openssl) genrsa \
    -out $(location ocsp.key.pem) 4096
# Sign OCSP Server certificate
$(location @openssl_dev_env//:openssl) req -config $(location openssl.cnf) -new -sha256 \
    -subj '/CN=0.0.0.0.ocsp' \
    -key $(location ocsp.key.pem) \
    -out $(location ocsp.csr.pem)
$(location @openssl_dev_env//:openssl) ca -batch -config $(location openssl.cnf) \
    -extensions ocsp -days 375 -notext -md sha256 \
    -in $(location ocsp.csr.pem) \
    -out $(location ocsp.cert.pem)
# Validate extensions
$(location @openssl_dev_env//:openssl) x509 -noout -text \
    -in $(location ocsp.cert.pem)


# Generate Client-Revoked CA private key
$(location @openssl_dev_env//:openssl) genpkey -out $(location client-revoked.key.pem) -algorithm RSA -pkeyopt rsa_keygen_bits:2048
$(location @openssl_dev_env//:openssl) req -new -key $(location client-revoked.key.pem) \
    -subj '/CN=0.0.0.0.clientrevoked' \
    -addext "subjectAltName = DNS:localhost, IP:127.0.0.1" \
    -out $(location client-revoked.csr.pem)
# Sign Client Cert
$(location @openssl_dev_env//:openssl) ca -batch -config $(location openssl.cnf) \
    -extensions usr_cert -notext -md sha256 \
    -in $(location client-revoked.csr.pem) \
    -out $(location client-revoked.cert.pem)
# Validate cert is correct
$(location @openssl_dev_env//:openssl) verify -CAfile $(location ca.cert.pem) \
    $(location client-revoked.cert.pem)
# Revoke
$(location @openssl_dev_env//:openssl) ca -batch -config $(location openssl.cnf) -revoke $(location client-revoked.cert.pem)

    """,
    tools = [
        "@openssl_dev_env//:openssl",
    ],
    visibility = ["//visibility:public"],
)
